[EXEC Gadget] <gleipner.chains.ysoserial.urldns.URL: int hashCode()>
 -> <gleipner.chains.ysoserial.urldns.URLStreamHandler: int hashCode(gleipner.chains.ysoserial.urldns.URL)>
 -> <gleipner.chains.ysoserial.urldns.URLStreamHandler: java.lang.String getHostAdress(gleipner.chains.ysoserial.urldns.URL)>
 -> <gleipner.chains.ysoserial.urldns.URL: java.lang.String getHostAddress()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.ysoserial.hibernate1.Hibernate_TypedValue: int hashCode()>
 -> <gleipner.chains.ysoserial.hibernate1.Hibernate_ValueHolder: java.lang.Object getValue()>
 -> <gleipner.chains.ysoserial.hibernate1.Hibernate_TypedValue$1: java.lang.Object initialize()>
 -> <gleipner.chains.ysoserial.hibernate1.Hibernate_TypedValue$1: java.lang.Integer initialize()>
 -> <gleipner.chains.ysoserial.hibernate1.Hibernate_ComponentType: int getHashCode(java.lang.Object)>
 -> <gleipner.chains.ysoserial.hibernate1.Hibernate_ComponentType: java.lang.Object getPropertyValue(java.lang.Object,int)>
 -> <gleipner.chains.ysoserial.hibernate1.Hibernate_AbstractComponentTuplizer: java.lang.Object getPropertyValue(java.lang.Object,int)>
 -> <gleipner.chains.ysoserial.hibernate1.Hibernate_GetterMethodImpl: java.lang.Object get(java.lang.Object)>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_005_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_003_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_003_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_003_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_003_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_003_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_007_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_016_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget16: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_002_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_002_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_002_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_002_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_019_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget16: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget17: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget18: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget19: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_017_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget16: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget17: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_009_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_012_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_010_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_014_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_015_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_004_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_011_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_006_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_001_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_001_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_001_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_013_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_018_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget16: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget17: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget18: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_020_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget16: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget17: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget18: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget19: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget20: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_008_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean equals(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean equals(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$SetProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$SetProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: int hashCode()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: java.lang.Object getLocalId()>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean equals(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean equals(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.util.Set keySet()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.util.Set keySet()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.util.Collection values()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.util.Collection values()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean equals(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean equals(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: int hashCode()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object get(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <com.vaadin.data.util.NestedMethodProperty: java.lang.Object getValue()>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[JNDI Gadget] <java.rmi.activation.ActivationID: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef2: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: java.rmi.server.RemoteCall newCall(java.rmi.server.RemoteObject,java.rmi.server.Operation[],int,long)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.rmi.activation.ActivationID: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef2: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: void invoke(java.rmi.server.RemoteCall)>
 -> <sun.rmi.server.UnicastRef: void free(java.rmi.server.RemoteCall,boolean)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.rmi.activation.ActivationID: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef2: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: void done(java.rmi.server.RemoteCall)>
 -> <sun.rmi.server.UnicastRef: void free(java.rmi.server.RemoteCall,boolean)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.rmi.activation.ActivationID: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: java.rmi.server.RemoteCall newCall(java.rmi.server.RemoteObject,java.rmi.server.Operation[],int,long)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.rmi.activation.ActivationID: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: void invoke(java.rmi.server.RemoteCall)>
 -> <sun.rmi.server.UnicastRef: void free(java.rmi.server.RemoteCall,boolean)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.rmi.activation.ActivationID: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: void done(java.rmi.server.RemoteCall)>
 -> <sun.rmi.server.UnicastRef: void free(java.rmi.server.RemoteCall,boolean)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: boolean isConnected()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: boolean isConnected()>
 -> <org.hibernate.internal.SessionImpl: boolean isConnected()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object remove(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: boolean isConnected()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: boolean isConnected()>
 -> <org.hibernate.internal.SessionImpl: boolean isConnected()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: java.lang.Object[] toArray(java.lang.Object[])>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: boolean containsKey(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readIndexExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: int indexOf(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: java.lang.String toString()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: boolean add(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[JNDI Gadget] <sun.rmi.server.UnicastRef: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: java.rmi.server.RemoteCall newCall(java.rmi.server.RemoteObject,java.rmi.server.Operation[],int,long)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <sun.rmi.server.UnicastRef: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: void invoke(java.rmi.server.RemoteCall)>
 -> <sun.rmi.server.UnicastRef: void free(java.rmi.server.RemoteCall,boolean)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <sun.rmi.server.UnicastRef: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: void done(java.rmi.server.RemoteCall)>
 -> <sun.rmi.server.UnicastRef: void free(java.rmi.server.RemoteCall,boolean)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: boolean containsAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.stat.internal.SessionStatisticsImpl: java.lang.String toString()>
 -> <org.hibernate.stat.internal.SessionStatisticsImpl: int getEntityCount()>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.stat.internal.SessionStatisticsImpl: java.lang.String toString()>
 -> <org.hibernate.stat.internal.SessionStatisticsImpl: int getEntityCount()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.stat.internal.SessionStatisticsImpl: java.lang.String toString()>
 -> <org.hibernate.stat.internal.SessionStatisticsImpl: int getCollectionCount()>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.stat.internal.SessionStatisticsImpl: java.lang.String toString()>
 -> <org.hibernate.stat.internal.SessionStatisticsImpl: int getCollectionCount()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <javax.management.modelmbean.DescriptorSupport: void readObject(java.io.ObjectInputStream)>
 -> <org.hibernate.collection.internal.PersistentSortedMap$SortedSubMap: void putAll(java.util.Map)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[JNDI Gadget] <org.hibernate.engine.transaction.jta.platform.internal.OrionJtaPlatform: javax.transaction.TransactionManager locateTransactionManager()>
 -> <org.hibernate.engine.jndi.internal.JndiServiceImpl: java.lang.Object locate(java.lang.String)>
 -> <javax.naming.InitialContext: java.lang.Object lookup(javax.naming.Name)>

[JNDI Gadget] <org.hibernate.engine.transaction.jta.platform.internal.SunOneJtaPlatform: javax.transaction.TransactionManager locateTransactionManager()>
 -> <org.hibernate.engine.jndi.internal.JndiServiceImpl: java.lang.Object locate(java.lang.String)>
 -> <javax.naming.InitialContext: java.lang.Object lookup(javax.naming.Name)>

[JNDI Gadget] <org.hibernate.engine.transaction.jta.platform.internal.WeblogicJtaPlatform: javax.transaction.TransactionManager locateTransactionManager()>
 -> <org.hibernate.engine.jndi.internal.JndiServiceImpl: java.lang.Object locate(java.lang.String)>
 -> <javax.naming.InitialContext: java.lang.Object lookup(javax.naming.Name)>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentMap: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.AbstractPersistentCollection$ListProxy: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: void add(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentIdentifierBag: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object readElementByIndex(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: boolean isConnected()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: boolean isConnected()>
 -> <org.hibernate.internal.SessionImpl: boolean isConnected()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[JNDI Gadget] <java.rmi.server.RemoteObject: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef2: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: java.rmi.server.RemoteCall newCall(java.rmi.server.RemoteObject,java.rmi.server.Operation[],int,long)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.rmi.server.RemoteObject: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef2: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: void invoke(java.rmi.server.RemoteCall)>
 -> <sun.rmi.server.UnicastRef: void free(java.rmi.server.RemoteCall,boolean)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.rmi.server.RemoteObject: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef2: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: void done(java.rmi.server.RemoteCall)>
 -> <sun.rmi.server.UnicastRef: void free(java.rmi.server.RemoteCall,boolean)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.rmi.server.RemoteObject: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: java.rmi.server.RemoteCall newCall(java.rmi.server.RemoteObject,java.rmi.server.Operation[],int,long)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.rmi.server.RemoteObject: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: void invoke(java.rmi.server.RemoteCall)>
 -> <sun.rmi.server.UnicastRef: void free(java.rmi.server.RemoteCall,boolean)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.rmi.server.RemoteObject: void readObject(java.io.ObjectInputStream)>
 -> <sun.rmi.server.UnicastRef: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: void done(java.rmi.server.RemoteCall)>
 -> <sun.rmi.server.UnicastRef: void free(java.rmi.server.RemoteCall,boolean)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object get(int)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void read()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <com.vaadin.data.util.MethodProperty: java.lang.Object getValue()>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[JNDI Gadget] <java.net.SocketPermission: int hashCode()>
 -> <java.net.SocketPermission: void getCanonName()>
 -> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>

[JNDI Gadget] <com.vaadin.data.util.sqlcontainer.SQLContainer: com.vaadin.data.Item getItem(java.lang.Object)>
 -> <com.vaadin.data.util.sqlcontainer.SQLContainer: int indexOfId(java.lang.Object)>
 -> <com.vaadin.data.util.sqlcontainer.SQLContainer: void getPage()>
 -> <com.sun.rowset.JdbcRowSetImpl: java.sql.ResultSetMetaData getMetaData()>
 -> <com.sun.rowset.JdbcRowSetImpl: java.sql.PreparedStatement prepare()>
 -> <com.sun.rowset.JdbcRowSetImpl: java.sql.Connection connect()>
 -> <javax.naming.Context: java.lang.Object lookup(java.lang.String)>

[JNDI Gadget] <com.vaadin.data.util.sqlcontainer.SQLContainer: com.vaadin.data.Item getItem(java.lang.Object)>
 -> <com.vaadin.data.util.sqlcontainer.SQLContainer: int indexOfId(java.lang.Object)>
 -> <com.vaadin.data.util.sqlcontainer.SQLContainer: void updateOffsetAndCache(int)>
 -> <com.vaadin.data.util.sqlcontainer.SQLContainer: void getPage()>
 -> <com.sun.rowset.JdbcRowSetImpl: java.sql.ResultSetMetaData getMetaData()>
 -> <com.sun.rowset.JdbcRowSetImpl: java.sql.PreparedStatement prepare()>
 -> <com.sun.rowset.JdbcRowSetImpl: java.sql.Connection connect()>
 -> <javax.naming.Context: java.lang.Object lookup(java.lang.String)>

[JNDI Gadget] <com.vaadin.data.util.sqlcontainer.SQLContainer: com.vaadin.data.Item getItem(java.lang.Object)>
 -> <com.vaadin.data.util.sqlcontainer.SQLContainer: void updateOffsetAndCache(int)>
 -> <com.vaadin.data.util.sqlcontainer.SQLContainer: void getPage()>
 -> <com.sun.rowset.JdbcRowSetImpl: java.sql.ResultSetMetaData getMetaData()>
 -> <com.sun.rowset.JdbcRowSetImpl: java.sql.PreparedStatement prepare()>
 -> <com.sun.rowset.JdbcRowSetImpl: java.sql.Connection connect()>
 -> <javax.naming.Context: java.lang.Object lookup(java.lang.String)>

[JNDI Gadget] <java.rmi.server.UnicastRemoteObject: void readObject(java.io.ObjectInputStream)>
 -> <java.rmi.server.UnicastRemoteObject: void reexport()>
 -> <java.rmi.server.UnicastRemoteObject: java.rmi.Remote exportObject(java.rmi.Remote,int)>
 -> <java.rmi.server.UnicastRemoteObject: java.rmi.Remote exportObject(java.rmi.Remote,sun.rmi.server.UnicastServerRef)>
 -> <sun.rmi.server.UnicastServerRef: java.rmi.Remote exportObject(java.rmi.Remote,java.lang.Object,boolean)>
 -> <sun.rmi.transport.LiveRef: void exportObject(sun.rmi.transport.Target)>

[INVOKE Gadget] <org.hibernate.property.BasicPropertyAccessor$BasicGetter: java.lang.Object get(java.lang.Object)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <com.vaadin.data.util.NestedMethodProperty: java.lang.Object getValue()>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[JNDI Gadget] <java.net.URL: int hashCode()>
 -> <java.net.URLStreamHandler: int hashCode(java.net.URL)>
 -> <java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)>
 -> <java.net.URL: java.net.InetAddress getHostAddress()>
 -> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentList: boolean contains(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Boolean readElementExistence(java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[JNDI Gadget] <sun.rmi.server.UnicastRef2: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: java.rmi.server.RemoteCall newCall(java.rmi.server.RemoteObject,java.rmi.server.Operation[],int,long)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[JNDI Gadget] <java.net.URL: boolean equals(java.lang.Object)>
 -> <java.net.URLStreamHandler: boolean equals(java.net.URL,java.net.URL)>
 -> <java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>
 -> <java.net.URLStreamHandler: boolean hostsEqual(java.net.URL,java.net.URL)>
 -> <java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)>
 -> <java.net.URL: java.net.InetAddress getHostAddress()>
 -> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>

[JNDI Gadget] <com.vaadin.data.util.sqlcontainer.SQLContainer: boolean containsId(java.lang.Object)>
 -> <com.vaadin.data.util.sqlcontainer.query.FreeformQuery: boolean containsRowWithKey(java.lang.Object[])>
 -> <com.vaadin.data.util.sqlcontainer.query.AbstractTransactionalQuery: java.sql.Connection getConnection()>
 -> <com.vaadin.data.util.sqlcontainer.connection.J2EEConnectionPool: java.sql.Connection reserveConnection()>
 -> <com.vaadin.data.util.sqlcontainer.connection.J2EEConnectionPool: javax.sql.DataSource getDataSource()>
 -> <com.vaadin.data.util.sqlcontainer.connection.J2EEConnectionPool: javax.sql.DataSource lookupDataSource()>
 -> <javax.naming.InitialContext: java.lang.Object lookup(java.lang.String)>

[JNDI Gadget] <com.vaadin.data.util.sqlcontainer.SQLContainer: boolean containsId(java.lang.Object)>
 -> <com.vaadin.data.util.sqlcontainer.query.TableQuery: boolean containsRowWithKey(java.lang.Object[])>
 -> <com.vaadin.data.util.sqlcontainer.query.TableQuery: java.sql.ResultSet executeQuery(com.vaadin.data.util.sqlcontainer.query.generator.StatementHelper)>
 -> <com.vaadin.data.util.sqlcontainer.query.AbstractTransactionalQuery: java.sql.Connection getConnection()>
 -> <com.vaadin.data.util.sqlcontainer.connection.J2EEConnectionPool: java.sql.Connection reserveConnection()>
 -> <com.vaadin.data.util.sqlcontainer.connection.J2EEConnectionPool: javax.sql.DataSource getDataSource()>
 -> <com.vaadin.data.util.sqlcontainer.connection.J2EEConnectionPool: javax.sql.DataSource lookupDataSource()>
 -> <javax.naming.InitialContext: java.lang.Object lookup(java.lang.String)>

[JNDI Gadget] <javax.management.remote.JMXServiceURL: void readObject(java.io.ObjectInputStream)>
 -> <javax.management.remote.JMXServiceURL: void validate(java.lang.String,java.lang.String,int,java.lang.String)>
 -> <javax.management.remote.JMXServiceURL: void validateHost(java.lang.String,int)>
 -> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>

[JNDI Gadget] <java.net.SocketPermission: boolean equals(java.lang.Object)>
 -> <java.net.SocketPermission: void getCanonName()>
 -> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>

[JNDI Gadget] <sun.rmi.server.UnicastRef: void readExternal(java.io.ObjectInput)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.LiveRef read(java.io.ObjectInput,boolean)>
 -> <sun.rmi.transport.DGCClient: void registerRefs(sun.rmi.transport.Endpoint,java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: boolean registerRefs(java.util.List)>
 -> <sun.rmi.transport.DGCClient$EndpointEntry: void makeDirtyCall(java.util.Set,long)>
 -> <sun.rmi.transport.DGCImpl_Stub: java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[],long,java.rmi.dgc.Lease)>
 -> <sun.rmi.server.UnicastRef: java.rmi.server.RemoteCall newCall(java.rmi.server.RemoteObject,java.rmi.server.Operation[],int,long)>
 -> <sun.rmi.transport.LiveRef: sun.rmi.transport.Channel getChannel()>

[EXEC Gadget] <gleipner.chains.depth.Depth_003_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_003_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_003_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_003_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_003_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_005_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_002_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_002_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_002_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_002_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[JNDI Gadget] <org.hibernate.engine.transaction.jta.platform.internal.JRun4JtaPlatform: javax.transaction.TransactionManager locateTransactionManager()>
 -> <org.hibernate.engine.jndi.internal.JndiServiceImpl: java.lang.Object locate(java.lang.String)>
 -> <javax.naming.InitialContext: java.lang.Object lookup(javax.naming.Name)>

[INVOKE Gadget] <com.vaadin.data.util.MethodProperty: java.lang.Object getValue()>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.property.BasicPropertyAccessor$BasicGetter: java.lang.Object get(java.lang.Object)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentBag: java.lang.Object set(int,java.lang.Object)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void write()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.CMTTransaction: void doBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction beginTransaction()>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void begin()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterTransactionBegin()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.Transaction getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: org.hibernate.engine.transaction.spi.TransactionImplementor getTransaction()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[EXEC Gadget] <gleipner.chains.depth.Depth_004_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void beforeTransactionCommit()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendBeforeTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl$1: void beforeCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedFlush()>
 -> <org.hibernate.internal.SessionImpl: void flush()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction: void afterTransactionCompletion(int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[EXEC Gadget] <gleipner.chains.depth.Depth_001_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_001_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_001_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void afterTransactionCompletion(org.hibernate.engine.transaction.spi.TransactionImplementor,boolean)>
 -> <org.hibernate.internal.SessionImpl: void internalClear()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: boolean isOpen()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.transaction.spi.AbstractTransactionImpl: void commit()>
 -> <org.hibernate.engine.transaction.internal.jta.JtaTransaction: void afterAfterCompletion()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void afterTransaction(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void sendAfterTransactionCompletionNotifications(org.hibernate.engine.transaction.spi.TransactionImplementor,int)>
 -> <org.hibernate.internal.SessionImpl$1: void afterCompletion(boolean,org.hibernate.engine.transaction.spi.TransactionImplementor)>
 -> <org.hibernate.internal.SessionImpl: void managedClose()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: void cleanup()>
 -> <org.hibernate.engine.internal.StatefulPersistenceContext: void clear()>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: boolean unsetSession(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.String generateUnexpectedSessionStateMessage(org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.pretty.MessageHelper: java.lang.String collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SessionImplementor)>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.PersistenceContext getPersistenceContext()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[INVOKE Gadget] <org.hibernate.collection.internal.PersistentSet: boolean addAll(java.util.Collection)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: void initialize(boolean)>
 -> <org.hibernate.collection.internal.AbstractPersistentCollection: java.lang.Object withTemporarySessionIfNeeded(org.hibernate.collection.internal.AbstractPersistentCollection$LazyInitializationWork)>
 -> <org.hibernate.engine.spi.SessionDelegatorBaseImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: java.sql.Connection close()>
 -> <org.hibernate.internal.SessionImpl: org.hibernate.engine.spi.ActionQueue getActionQueue()>
 -> <org.hibernate.internal.SessionImpl: void checkTransactionSynchStatus()>
 -> <org.hibernate.internal.SessionImpl: void pulseTransactionCoordinator()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void pulse()>
 -> <org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl: void attemptToRegisterJtaSync()>
 -> <org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.TransactionManagerBasedSynchronizationStrategy: void registerSynchronization(javax.transaction.Synchronization)>
 -> <org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter$TransactionAdapter: void registerSynchronization(javax.transaction.Synchronization)>
 -> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>

[EXEC Gadget] <gleipner.chains.depth.Depth_007_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_007_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_001_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_001_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_001_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_010_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_010_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_009_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_009_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_019_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget16: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget17: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget18: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_LinkGadget19: void linkMethod()>
 -> <gleipner.chains.depth.Depth_019_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_004_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_004_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_013_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_013_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_020_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget16: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget17: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget18: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget19: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_LinkGadget20: void linkMethod()>
 -> <gleipner.chains.depth.Depth_020_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_005_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_005_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_003_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_003_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_003_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_003_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_003_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_006_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_006_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_011_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_011_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_008_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_008_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_015_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_015_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_017_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget16: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_LinkGadget17: void linkMethod()>
 -> <gleipner.chains.depth.Depth_017_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_018_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget16: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget17: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_LinkGadget18: void linkMethod()>
 -> <gleipner.chains.depth.Depth_018_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_016_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget15: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_LinkGadget16: void linkMethod()>
 -> <gleipner.chains.depth.Depth_016_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_002_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_002_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_002_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_002_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_012_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_012_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

[EXEC Gadget] <gleipner.chains.depth.Depth_014_TrampolineGadget: int hashCode()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget1: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget2: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget3: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget4: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget5: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget6: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget7: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget8: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget9: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget10: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget11: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget12: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget13: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_LinkGadget14: void linkMethod()>
 -> <gleipner.chains.depth.Depth_014_SinkGadget: void linkMethod()>
 -> <gleipner.core.SinkGadget: void sinkMethod(java.lang.String)>

